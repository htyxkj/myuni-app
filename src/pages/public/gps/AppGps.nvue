<template>
	<view class="myBody">
		<web-view v-if="map_src" class="webView_class" :src="map_src" @onPostMessage="view_message"></web-view>
	</view>
</template>
<script>
	
	export default {
		data() {
			return {
				map_src:"",
				viewStyle:"",
				pi : 3.1415926535897932384626,
				x_pi : 3.14159265358979324 * 3000.0 / 180.0,
				a : 6378245.0,
				ee : 0.00669342162296594323,
				methordName: null,
			}
		},
		mounted(){
			this.init();
		},
		onLoad(option) {
			this.methordName = option.methordName;
		},
		methods: {
			init(){
				let _src = "/static/map/tianMap/bip/map.html?";
				_src += "vs="+new Date().getTime(); 
				this.loading = true;
				let _this = this;
				uni.getLocation({
					type: 'gcj02',
					altitude:true,
					success: function (result) {
						let res = {longitude:result.longitude,latitude:result.latitude};
						let resGPS = _this.gcj02_To_Gps84(result.latitude,result.longitude)
						res = {longitude:resGPS[1],latitude:resGPS[0]}; 
						_src += "&lng="+res.longitude;
						_src += "&lat="+res.latitude;
						_this.map_src = _src;
					},
					fail:function(res){
					}
				});
			},
			view_message(res){
				console.log(res)
				//确定
				let data = res.detail.data[0];
				console.log(data)
				let param ={address:data.address,lgt:data.lng+";"+data.lat};
				if(this.methordName){
					uni.$emit(this.methordName,param);
				}
				uni.navigateBack({delta:1});
			},

			/** 
			* * 火星坐标系 (GCJ-02) to 84 * * @param lon * @param lat * @return 
			* */  
			gcj02_To_Gps84(lat, lon) {  
				lat = +lat;
				lon = +lon;
				var gps = this.transform(lat, lon);  
				var lontitude = lon * 2 - gps[1];  
				var latitude = lat * 2 - gps[0];  
				return [latitude, lontitude];
			},
			transform(lat,lon) {  
				if (this.outOfChina(lat, lon)) {  
					return [lat,lon];  
				}  
				var dLat = this.transformLat(lon - 105.0, lat - 35.0);  
				var dLon = this.transformLon(lon - 105.0, lat - 35.0);  
				var radLat = lat / 180.0 * this.pi;  
				var magic = Math.sin(radLat);  
				magic = 1 - this.ee * magic * magic;  
				var sqrtMagic = Math.sqrt(magic);  
				dLat = (dLat * 180.0) / ((this.a * (1 - this.ee)) / (magic * sqrtMagic) * this.pi);  
				dLon = (dLon * 180.0) / (this.a / sqrtMagic * Math.cos(radLat) * this.pi);  
				var mgLat = lat + dLat;  
				var mgLon = lon + dLon;  
				return [mgLat,mgLon];
			},
			outOfChina(lat,lon) {  
				if (lon < 72.004 || lon > 137.8347)  
					return true;  
				if (lat < 0.8293 || lat > 55.8271)  
					return true;  
				return false;  
			},
			transformLat(x,y) {  
				var ret = -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y  
						+ 0.2 * Math.sqrt(Math.abs(x));  
				ret += (20.0 * Math.sin(6.0 * x * this.pi) + 20.0 * Math.sin(2.0 * x * this.pi)) * 2.0 / 3.0;  
				ret += (20.0 * Math.sin(y * this.pi) + 40.0 * Math.sin(y / 3.0 * this.pi)) * 2.0 / 3.0;  
				ret += (160.0 * Math.sin(y / 12.0 * this.pi) + 320 * Math.sin(y * this.pi / 30.0)) * 2.0 / 3.0;  
				return ret;  
			},
			transformLon(x,y) {  
				var ret = 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1  
						* Math.sqrt(Math.abs(x));  
				ret += (20.0 * Math.sin(6.0 * x * this.pi) + 20.0 * Math.sin(2.0 * x * this.pi)) * 2.0 / 3.0;  
				ret += (20.0 * Math.sin(x * this.pi) + 40.0 * Math.sin(x / 3.0 * this.pi)) * 2.0 / 3.0;  
				ret += (150.0 * Math.sin(x / 12.0 * this.pi) + 300.0 * Math.sin(x / 30.0  
						* this.pi)) * 2.0 / 3.0;  
				return ret;  
			}
		}
	}
</script>

<style>
    .myBody{  
        flex-direction: column;  
        flex: 1;  
    }  
    .webView_class {  
        width: 750rpx;  
        position: absolute;  
        top: 0;  
        bottom: 0;  
        left: 0;  
        right: 0;  
    }  
</style>